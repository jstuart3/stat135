#name[i] <- paste(seq_numbers[i], 'char', sep = "-")
numbers$name[i] <- paste(tolower(states[num_chars == i]), collapse = ", ")
}
}
numbers
names(numbers)
# making the comversion function more robust
to_celsius <- function(x = 1) {
(x - 32) * (5/9)
}
to_kelvin <- function(x = 1) {
(x + 459.67) * (5/9)
}
to_reaumur <- function(x = 1) {
(x - 32) * (4/9)
}
to_rankine <- function(x = 1) {
x + 459.67
}
temp_convert <- function(x = 1, to = "celsius") {
switch(to <- tolower(to),
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
temp_convert(30, 'Celsius')
temp_convert(30, 'CELSIUS')
# three ways to generate a vector of file names
# Method 1, using a for loop and 'paste()`
numbers <- c(1:10)
files <- c()
for (i in 1:10) {
files[i] <- paste('file', numbers[i], '.csv', sep = '')
}
print(files)
# Method 2, using `paste0()`
paste0('file', 1:10, '.csv')
# Method 3, using `substr()` and `paste()`
paste(substr('file#.csv', 1, 4), 1:10, substr('file#.csv', 6, 9), sep = "")
# Working with `cat()`
# name of output file
outfile <- "output.txt"
# writing to 'outfile.txt'
cat("This is the first line", file = outfile)
# insert new line
cat("\n", file = outfile, append = TRUE)
cat("A 2nd line", file = "output.txt", append = TRUE)
# insert 2 new lines
cat("\n\n", file = outfile, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n",
file = outfile, append = TRUE)
# my turn with  cat()`
# name of output file
new_output_file <- "yamlheader.txt"
# writing to 'yamlheader.txt'
cat("---", file = new_output_file)
cat("\ntitle: Head, Head, Header", file = new_output_file, append = TRUE)
cat("\nauthor: Jonathan Stuart", file = new_output_file, append = TRUE)
cat("\ndate: 11/9/17", file = new_output_file, append = TRUE)
cat("\noutput: html_document", file = new_output_file, append = TRUE)
cat("\n---", file = new_output_file, append = TRUE)
cat("\n\nThis is the first line", file = new_output_file, append = TRUE)
#cat("\n", file = new_output_file, append = TRUE)
cat("\nA 2nd line", file = new_output_file, append = TRUE)
cat("\n\n", file = new_output_file, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n",
file = new_output_file, append = TRUE)
#---
#title: "Lab10 - Basics of String Manipulations"
#author: "Jonathan Stuart"
#date: "11/9/2017"
#output: html_document
#---
library(testthat)
# This is the data set we will be working with.
head(USArrests)
states <- rownames(USArrests)
head(states)
# number of characters
length(states)
nchar(states)
# case folding
# to lower case
tolower(states)
# to upper case
toupper(states)
# case folding (upper = TRUE)
casefold(states, upper = TRUE)
# case folding (upper = FALSE)
casefold(states, upper = FALSE)
# length of state names
# number of charcaters
num_chars <- nchar(states)
# frequency table
tbl <- ftable(num_chars)
# bar chart
barplot(num_chars)
# using paste() and paste0()
paste(states[1:5], num_chars[1:5], sep = ' = ')
paste(states[1], states[2],  states[3], states[4], states[5], sep = '')
# using substr()
# shorten state names with first 3 characters
substr(states, 1, 3)
# shorten state names with last 3 characters
substr(states, num_chars - 2, num_chars)
# custom shortening
first <- substr(states, 1, 1)
last_3 <- substr(states, num_chars - 2, num_chars)
paste(first, last_3, sep = '') # again, collapse not working
# challenge
seq_numbers <- c(1:max(num_chars))
numbers <- c()
name <- c()
for (i in 4:14) {
if (i %% 2 == 0) {
name[i] <- paste(seq_numbers[i], 'char', sep = "-")
numbers$name[i] <- paste(toupper(states[num_chars == i]), collapse = ", ")
} else {
#name[i] <- paste(seq_numbers[i], 'char', sep = "-")
numbers$name[i] <- paste(tolower(states[num_chars == i]), collapse = ", ")
}
}
numbers
names(numbers)
# making the comversion function more robust
to_celsius <- function(x = 1) {
(x - 32) * (5/9)
}
to_kelvin <- function(x = 1) {
(x + 459.67) * (5/9)
}
to_reaumur <- function(x = 1) {
(x - 32) * (4/9)
}
to_rankine <- function(x = 1) {
x + 459.67
}
temp_convert <- function(x = 1, to = "celsius") {
switch(to <- tolower(to),
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
temp_convert(30, 'Celsius')
temp_convert(30, 'CELSIUS')
# three ways to generate a vector of file names
# Method 1, using a for loop and 'paste()`
numbers <- c(1:10)
files <- c()
for (i in 1:10) {
files[i] <- paste('file', numbers[i], '.csv', sep = '')
}
print(files)
# Method 2, using `paste0()`
paste0('file', 1:10, '.csv')
# Method 3, using `substr()` and `paste()`
paste(substr('file#.csv', 1, 4), 1:10, substr('file#.csv', 6, 9), sep = "")
# Working with `cat()`
# name of output file
outfile <- "output.txt"
# writing to 'outfile.txt'
cat("This is the first line", file = outfile)
# insert new line
cat("\n", file = outfile, append = TRUE)
cat("A 2nd line", file = "output.txt", append = TRUE)
# insert 2 new lines
cat("\n\n", file = outfile, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n",
file = outfile, append = TRUE)
# my turn with  cat()`
# name of output file
new_output_file <- "yamlheader.txt"
# writing to 'yamlheader.txt'
cat("---", file = new_output_file)
cat("\ntitle: Head, Head, Header", file = new_output_file, append = TRUE)
cat("\nauthor: Jonathan Stuart", file = new_output_file, append = TRUE)
cat("\ndate: 11/9/17", file = new_output_file, append = TRUE)
cat("\noutput: html_document", file = new_output_file, append = TRUE)
cat("\n---", file = new_output_file, append = TRUE)
cat("\n\nThis is the first line", file = new_output_file, append = TRUE)
#cat("\n", file = new_output_file, append = TRUE)
cat("\nA 2nd line", file = new_output_file, append = TRUE)
cat("\n\n", file = new_output_file, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n",
file = new_output_file, append = TRUE)
library(shiny); runApp('Documents/stat133/stat133-hws-fall17/Original hw04 app/gradevis.R')
runApp('Documents/stat133/stat133-hws-fall17/Original hw04 app/gradevis.R')
runApp('Documents/stat133/stat133-hws-fall17/Original hw04 app/gradevis.R')
runApp('Documents/stat133/stat133-hws-fall17/Original hw04 app/gradevis.R')
library(ggvis)
# Scatter plot with hovering
mtcars %>% ggvis(x = ~wt, y = ~mpg, size.hover := 200) %>%
layer_points()
# Larger point and outline when hovering
mtcars %>%
ggvis(x = ~wt, y = ~mpg, size.hover := 200,
stroke := NA, stroke.hover := "red", strokeWidth := 3) %>%
layer_points()
# Line changes color and points change size when hovered over, with 250 ms
# transition time
pressure %>% ggvis(x = ~temperature, y = ~pressure) %>%
layer_paths(stroke.hover := "red", strokeWidth.hover := 4, strokeWidth := 2) %>%
layer_points(size := 50, size.hover := 200) %>%
set_options(hover_duration = 250)
# Hover with layer_smooths
mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_points() %>%
layer_smooths(fill.hover := "red", se = TRUE)
# Opacity with layer_densities
PlantGrowth %>% group_by(group) %>%
ggvis(x = ~weight, stroke = ~group, fill = ~group,
fillOpacity := 0.2, fillOpacity.hover := .5) %>%
layer_densities()
library(ggvis)
# Scatter plot with hovering
mtcars %>% ggvis(x = ~wt, y = ~mpg, size.hover := 200) %>%
layer_points()
# Larger point and outline when hovering
mtcars %>%
ggvis(x = ~wt, y = ~mpg, size.hover := 200,
stroke := NA, stroke.hover := "red", strokeWidth := 3) %>%
layer_points()
# Line changes color and points change size when hovered over, with 250 ms
# transition time
pressure %>% ggvis(x = ~temperature, y = ~pressure) %>%
layer_paths(stroke.hover := "red", strokeWidth.hover := 4, strokeWidth := 2) %>%
layer_points(size := 50, size.hover := 200) %>%
set_options(hover_duration = 250)
# Hover with layer_smooths
mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_points() %>%
layer_smooths(fill.hover := "red", se = TRUE)
# Opacity with layer_densities
PlantGrowth %>% group_by(group) %>%
ggvis(x = ~weight, stroke = ~group, fill = ~group,
fillOpacity := 0.2, fillOpacity.hover := .5) %>%
layer_densities()
mtcars %>% ggvis(x = ~wt, y = ~mpg, size.hover := 200) %>%
layer_points()
mtcars %>%
ggvis(x = ~wt, y = ~mpg, size.hover := 200,
stroke := NA, stroke.hover := "red", strokeWidth := 3) %>%
layer_points()
pressure %>% ggvis(x = ~temperature, y = ~pressure) %>%
layer_paths(stroke.hover := "red", strokeWidth.hover := 4, strokeWidth := 2) %>%
layer_points(size := 50, size.hover := 200) %>%
set_options(hover_duration = 250)
mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_points() %>%
layer_smooths(fill.hover := "red", se = TRUE)
PlantGrowth %>% group_by(group) %>%
ggvis(x = ~weight, stroke = ~group, fill = ~group,
fillOpacity := 0.2, fillOpacity.hover := .5) %>%
layer_densities()
library(shiny)
library(ggvis)
runApp(list(ui = pageWithSidebar(
div(),
sidebarPanel(
sliderInput("n", "Number of points", min = 1, max = nrow(mtcars),
value = 10, step = 1),
uiOutput("plot_ui")
),
mainPanel(
ggvisOutput("plot"),
tableOutput("mtc_table")
)
)
, server= function(input, output, session) {
# A reactive subset of mtcars
mtc <- reactive({
data = mtcars[1:input$n, ]
data$long = as.character(paste0("A car with ",data$cyl," cylinders and ",data$gear," gears and ",data$carb, " carburators"))
data
})
# A simple visualisation. In shiny apps, need to register observers
# and tell shiny where to put the controls
mtc %>%
ggvis(~wt, ~mpg, key:= ~long) %>%
layer_points(fill = ~factor(long)) %>%
add_tooltip(function(data){
paste0("Wt: ", data$wt, "<br>", "Mpg: ",as.character(data$mpg), "<br>", "String: ", as.character(data$long))
}, "hover") %>%
bind_shiny("plot", "plot_ui")
output$mtc_table <- renderTable({
mtc()[, c("wt", "mpg", "long")]
})
})
)
mtc %>%
ggvis(~wt, ~mpg, key:= ~long) %>%
layer_points(fill = ~factor(long)) %>%
add_tooltip(function(data){
paste0("Wt: ", data$wt, "<br>", "Mpg: ",as.character(data$mpg), "<br>", "String: ", as.character(data$long))
}, "hover") %>%
bind_shiny("plot", "plot_ui")
library(shiny)
library(ggvis)
runApp(list(ui = pageWithSidebar(
div(),
sidebarPanel(
sliderInput("n", "Number of points", min = 1, max = nrow(mtcars),
value = 10, step = 1),
uiOutput("plot_ui")
),
mainPanel(
ggvisOutput("plot"),
tableOutput("mtc_table")
)
)
, server= function(input, output, session) {
# A reactive subset of mtcars
mtc <- reactive({
data = mtcars[1:input$n, ]
data$long = as.character(paste0("A car with ",data$cyl," cylinders and ",data$gear," gears and ",data$carb, " carburators"))
data
})
# A simple visualisation. In shiny apps, need to register observers
# and tell shiny where to put the controls
mtc %>%
ggvis(~wt, ~mpg, key:= ~long) %>%
layer_points(fill = ~factor(long)) %>%
add_tooltip(function(data){
paste0("Wt: ", data$wt, "<br>", "Mpg: ",as.character(data$mpg), "<br>", "String: ", as.character(data$long))
}, "hover") %>%
bind_shiny("plot", "plot_ui")
output$mtc_table <- renderTable({
mtc()[, c("wt", "mpg", "long")]
})
})
)
base <- mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_points()
base
base %>% add_tooltip(all_values, "hover")
all_values <- function(x) {
if(is.null(x)) return(NULL)
paste0(names(x), ": ", format(x), collapse = "<br />")
}
base %>% add_tooltip(all_values, "hover")
library(shiny)
library(ggvis)
runApp(list(ui = pageWithSidebar(
div(),
sidebarPanel(
sliderInput("n", "Number of points", min = 1, max = nrow(mtcars),
value = 10, step = 1),
uiOutput("plot_ui")
),
mainPanel(
ggvisOutput("plot"),
tableOutput("mtc_table")
)
)
, server= function(input, output, session) {
# A reactive subset of mtcars
mtc <- reactive({
data = mtcars[1:input$n, ]
data$long = as.character(paste0("A car with ",data$cyl," cylinders and ",data$gear," gears and ",data$carb, " carburators"))
data
})
# A simple visualisation. In shiny apps, need to register observers
# and tell shiny where to put the controls
mtc %>%
ggvis(~wt, ~mpg, key:= ~long) %>%
layer_points(fill = ~factor(long)) %>%
add_tooltip(function(data){
paste0("Wt: ", data$wt, "<br>", "Mpg: ",as.character(data$mpg), "<br>", "String: ", as.character(data$long))
}, "hover") %>%
bind_shiny("plot", "plot_ui")
output$mtc_table <- renderTable({
mtc()[, c("wt", "mpg", "long")]
})
})
)
mtcars %>% ggvis(x = ~wt, y = ~mpg, size.hover := 200) %>%
layer_points()
mtcars %>% ggvis(x = ~wt, y = ~mpg, size.hover := 200) %>%
layer_points()
mtcars %>%
ggvis(x = ~wt, y = ~mpg, size.hover := 200,
stroke := NA, stroke.hover := "red", strokeWidth := 3) %>%
layer_points()
pressure %>% ggvis(x = ~temperature, y = ~pressure) %>%
layer_paths(stroke.hover := "red", strokeWidth.hover := 4, strokeWidth := 2) %>%
layer_points(size := 50, size.hover := 200) %>%
set_options(hover_duration = 250)
mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_points() %>%
layer_smooths(fill.hover := "red", se = TRUE)
PlantGrowth %>% group_by(group) %>%
ggvis(x = ~weight, stroke = ~group, fill = ~group,
fillOpacity := 0.2, fillOpacity.hover := .5) %>%
layer_densities()
library(shiny)
library(ggvis)
runApp(list(ui = pageWithSidebar(
div(),
sidebarPanel(
sliderInput("n", "Number of points", min = 1, max = nrow(mtcars),
value = 10, step = 1),
uiOutput("plot_ui")
),
mainPanel(
ggvisOutput("plot"),
tableOutput("mtc_table")
)
)
, server= function(input, output, session) {
# A reactive subset of mtcars
mtc <- reactive({
data = mtcars[1:input$n, ]
data$long = as.character(paste0("A car with ",data$cyl," cylinders and ",data$gear," gears and ",data$carb, " carburators"))
data
})
# A simple visualisation. In shiny apps, need to register observers
# and tell shiny where to put the controls
mtc %>%
ggvis(~wt, ~mpg, key:= ~long) %>%
layer_points(fill = ~factor(long)) %>%
add_tooltip(function(data){
paste0("Wt: ", data$wt, "<br>", "Mpg: ",as.character(data$mpg), "<br>", "String: ", as.character(data$long))
}, "hover") %>%
bind_shiny("plot", "plot_ui")
output$mtc_table <- renderTable({
mtc()[, c("wt", "mpg", "long")]
})
})
)
all_values <- function(x) {
if(is.null(x)) return(NULL)
paste0(names(x), ": ", format(x), collapse = "<br />")
}
base <- mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_points()
base %>% add_tooltip(all_values, "hover")
all_values <- function(x) {
if(is.null(x)) return(NULL)
paste0(names(x), ": ", format(x), collapse = "<br />")
}
base <- mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_points()
#base %>% add_tooltip(all_values, "hover")
base %>% add_tooltip(all_values, "click")
uc_web <- 'http://www.berkeley.edu/atoz'
library(rvest)
install.packages("rvest")
library(rvest)
uc_web <- 'http://www.berkeley.edu/atoz'
readLines(uc_web)
x <- readLines(uc_web)
class(x)
x[1]
x[2]
x[3]
x[4]
x[length(x)]
class(x)
body <- x[29:2360]
body <- x[30:2359]
head(body)
[377]
x[377]
pars <- grep('<p class="A">', body)
pars <- grep('<p class="A">', body, value = TRUE)
pars
html_doc <- read_html(uc_web)
html_doc
class(html_doc)
html_nodes(html_doc, css = "p.A")
pars <- html_nodes(html_doc, css = "p.A")
pars
anchors <- html_nodes(pars, css = "a")
html_text(anchors)
# get url's
anchors <- html_nodes(pars, css = "a")
hrefs <- html_attr(anchors, name = "href")
hrefs
pars2 <- html_nodes(html_doc, xpath = "//p[@class='A']")
pars2
html_nodes(pars2, xpath = "a")
html_attr(anchors2, name = 'href')
anchors2 <- html_nodes(pars2, xpath = "a")
html_attr(anchors2, name = 'href')
pars2 <- html_nodes(html_doc, xpath = "//p[@class='A']")
anchors2 <- html_nodes(pars2, xpath = "a")
hrefs2 <- html_attr(anchors2, name = 'href')
hrefs2
hrefs
hrefs2
hrefs
html_doc %>%
html_nodes(xpath = "//p[@class='A']/a") %>%
html_attr("href")
html_doc %>%
html_nodes(xpath = "//p[@class='A']/a") %>%
html_text()
html_doc %>%
html_nodes(xpath = "//p[@class='A']/a") %>%
html_text()
html_doc %>%
html_nodes(xpath = "//p[@class='A']/a") %>%
html_text()
library(ggvis)
library(dplyr)
library(ggvis)
library(datasets)
library(dplyr)
