plot(sd_exp_sample, exp_sample, xlim = 4)
plot(sd_exp_sample, exp_sample, xlim = 5)
plot(sd_exp_sample, exp_sample, xlim = c(0, 5)
plot(sd_exp_sample, exp_sample, xlim = c(0, 5)
plot(sd_exp_sample, exp_sample, xlim = c(0, 5))
plot(sd_exp_sample, exp_sample, xlim = c(0, 5), ylim = c(0, 0.6))
plot( exp_sample, sd_exp_sample, xlim = c(0, 5), ylim = c(0, 0.6))
range(sd_exp_sample)
range(exp_sample)
sd_exp_sample <- sqrt((1/100) * (exp(-(exp_sample)) / (1- exp(-(exp_sample)))))
plot(exp_sample, sd_exp_sample, xlim = c(0, 5), ylim = c(0, 0.6))
#generating an exponential sample of size 100
set.seed(3)
exp_sample <- rexp(n = 100, rate = 1)
#empirical log survival function
sd_exp_sample <- sqrt((1/100) * exp(-exp_sample) / (1 - exp(-exp_sample)))
plot(exp_sample, sd_exp_sample, xlim = c(0, 5), ylim = c(0, 0.6))
exp_sample <- rexp(n = 100, rate = 1)
exp_sample
exp_sample <- 3.04016
sd_exp_sample <- sqrt((1/100) * exp(-exp_sample) / (1 - exp(-exp_sample)))
sd_exp_sample
exp_sample <- 3.04016
sd_exp_sample <- sqrt((1/100) * (exp(-exp_sample) / (1 - exp(-exp_sample))))
sd_exp_sample
sd_exp_sample*2
exp_sample <- 3.04016
sd_exp_sample <- sqrt((1/100) * (exp(exp_sample) / (1 - exp(exp_sample))))
exp_sample <- 3.04016
sd_exp_sample <- sqrt((1/100) * (exp(exp_sample) / (1 - exp(exp_sample))))
exp_sample <- 3.04016
sd_exp_sample <- sqrt((1/100) * (exp(-exp_sample) / (1 - exp(-exp_sample))))
sd_exp_sample
#generating an exponential sample of size 100
set.seed(3)
exp_sample <- rexp(n = 100, rate = 1)
#empirical log survival function
sd_exp_sample <- sqrt((1/100) * (1 - exp(-exp_sample) / (exp(-exp_sample))))
plot(exp_sample, sd_exp_sample, xlim = c(0, 5), ylim = c(0, 0.6))
#generating an exponential sample of size 100
set.seed(3)
exp_sample <- rexp(n = 100, rate = 1)
#empirical log survival function
sd_exp_sample <- sqrt((1/100) * ((1 - exp(-exp_sample)) / (exp(-exp_sample))))
plot(exp_sample, sd_exp_sample, xlim = c(0, 5), ylim = c(0, 0.6))
exp_samples <- 0
for (i in 1:10) {
exp_samples[i] <- rexp(n = 100, rate = 1)
}
exp_samples <- matrix(nrow = 100, ncol = 10)
for (i in 1:10) {
exp_samples[i] <- rexp(n = 100, rate = 1)
}
exp_samples <- matrix(nrow = 100, ncol = 10)
for (i in 1:10) {
exp_samples[i] <- rexp(n = 100, rate = 1)
}
exp_samples <- matrix(nrow = 100, ncol = 10)
for (i in 1:10) {
exp_samples[ , i] <- rexp(n = 100, rate = 1)
}
exp_samples
exp_samples <- matrix(nrow = 100, ncol = 10)
sd_exp_samples <- matrix(nrow = 100, ncol = 10)
for (i in 1:10) {
exp_samples[ , i] <- rexp(n = 100, rate = 1)
sd_exp_samples[ , i] <- sqrt((1/100) * ((1 - exp(-exp_samples[i])) / (exp(-exp_samples[i]))))
}
for (i in 1:10) {
plot(exp_samples[i], sd_exp_sample, xlim = c(0, 5), ylim = c(0, 0.6))
}
exp_samples <- matrix(nrow = 100, ncol = 10)
sd_exp_samples <- matrix(nrow = 100, ncol = 10)
for (i in 1:10) {
exp_samples[ , i] <- rexp(n = 100, rate = 1)
sd_exp_samples[ , i] <- sqrt((1/100) * ((1 - exp(-exp_samples[i])) / (exp(-exp_samples[i]))))
}
for (i in 1:10) {
plot(exp_samples[i], sd_exp_samples[i], xlim = c(0, 5), ylim = c(0, 0.6))
}
sd_exp_samples
exp_samples <- matrix(nrow = 100, ncol = 10)
sd_exp_samples <- matrix(nrow = 100, ncol = 10)
for (i in 1:10) {
exp_samples[ , i] <- rexp(n = 100, rate = 1)
}
for (i in 1:10) {
sd_exp_samples[ , i] <- sqrt((1/100) * ((1 - exp(-exp_samples[i])) / (exp(-exp_samples[i]))))
}
for (i in 1:10) {
plot(exp_samples[i], sd_exp_samples[i], xlim = c(0, 5), ylim = c(0, 0.6))
}
for (i in 1:10) {
exp_samples[ , i] <- rexp(n = 100, rate = 1)
}
exp_samples
exp_samples <- matrix(nrow = 100, ncol = 10)
sd_exp_samples <- matrix(nrow = 100, ncol = 10)
for (i in 1:10) {
exp_samples[ , i] <- rexp(n = 100, rate = 1)
}
for (i in 1:10) {
sd_exp_samples[ , i] <- sqrt((1/100) * ((1 - exp(-exp_samples[ , i])) / (exp(-exp_samples[ , i]))))
}
for (i in 1:10) {
plot(exp_samples[i], sd_exp_samples[i], xlim = c(0, 5), ylim = c(0, 0.6))
}
exp_samples <- matrix(nrow = 100, ncol = 10)
sd_exp_samples <- matrix(nrow = 100, ncol = 10)
for (i in 1:10) {
exp_samples[ , i] <- rexp(n = 100, rate = 1)
}
for (i in 1:10) {
sd_exp_samples[ , i] <- sqrt((1/100) * ((1 - exp(-exp_samples[ , i])) / (exp(-exp_samples[ , i]))))
}
for (i in 1:10) {
plot(exp_samples[ , i], sd_exp_samples[ , i], xlim = c(0, 5), ylim = c(0, 0.6))
}
for (i in 1:10) {
exp_samples[ , i] <- rexp(n = 100, rate = 1)
}
exp_samples <- matrix(nrow = 100, ncol = 10)
#sd_exp_samples <- matrix(nrow = 100, ncol = 10)
#generating samples of size 100 from an exponential distribution
for (i in 1:10) {
exp_samples[ , i] <- rexp(n = 100, rate = 1)
}
#for (i in 1:10) {
#  sd_exp_samples[ , i] <- sqrt((1/100) * ((1 - exp(-exp_samples[ , i])) / (exp(-exp_samples[ , i]))))
#}
#plotting empirical log survival functions
for (i in 1:10) {
plot(exp_samples[ , i], (1 - exp(-exp_samples[ , i])))#, xlim = c(0, 5), ylim = c(0, 0.6))
}
exp_samples <- matrix(nrow = 100, ncol = 10)
#sd_exp_samples <- matrix(nrow = 100, ncol = 10)
#generating samples of size 100 from an exponential distribution
for (i in 1:10) {
exp_samples[ , i] <- rexp(n = 100, rate = 1)
}
#for (i in 1:10) {
#  sd_exp_samples[ , i] <- sqrt((1/100) * ((1 - exp(-exp_samples[ , i])) / (exp(-exp_samples[ , i]))))
#}
#plotting empirical log survival functions
for (i in 1:10) {
plot(exp_samples[ , i], (1 - exp(-exp_samples[ , i])), ylim = c(0, 7))
}
exp_samples <- matrix(nrow = 100, ncol = 10)
#sd_exp_samples <- matrix(nrow = 100, ncol = 10)
#generating samples of size 100 from an exponential distribution
for (i in 1:10) {
exp_samples[ , i] <- rexp(n = 100, rate = 1)
}
#for (i in 1:10) {
#  sd_exp_samples[ , i] <- sqrt((1/100) * ((1 - exp(-exp_samples[ , i])) / (exp(-exp_samples[ , i]))))
#}
#plotting empirical log survival functions
for (i in 1:10) {
plot(exp_samples[ , i], (1 - exp(-exp_samples[ , i])), xlim = c(0, 7))
}
ir_data <- read.csv("iridium.csv")
rho_data <- read.csv("rhodium.csv")
View(rho_data)
View(rho_data)
ir_data <- read.csv("iridium.csv", col.names = "Temp of Sublimation")
rho_data <- read.csv("rhodium.csv")
View(ir_data)
View(ir_data)
ir_data <- read.csv("iridium.csv", col.names = "Temp of Sublimation")
rho_data <- read.csv("rhodium.csv", col.names = "Temp of Sublimation")
hist(ir_data)
hist(ir_data)
hist(rho_data)
ir_data <- read.csv("iridium.csv", col.names = "Temp of Sublimation")
rho_data <- read.csv("rhodium.csv", col.names = "Temp of Sublimation")
hist(ir_data)
ir_data <- read.csv("iridium.csv")
rho_data <- read.csv("rhodium.csv", col.names = "Temp of Sublimation")
hist(ir_data)
hist(ir_data)
View(ir_data)
View(ir_data)
ir_data <- read.csv("iridium.csv", header = FALSE)
rho_data <- read.csv("rhodium.csv", col.names = "Temp of Sublimation")
hist(ir_data)
View(ir_data)
View(ir_data)
ir_data <- read.csv("iridium.csv", header = FALSE)
rho_data <- read.csv("rhodium.csv", header = FALSE)
ir_data
typeof(ir_data)
ir_data <- as.data.frame(read.csv("iridium.csv", header = FALSE))
hist(ir_data)
ir_data <- as.numeric(read.csv("iridium.csv", header = FALSE))
ir_data <- read.csv("iridium.csv", header = FALSE)
ir_data
ir_data <- numeric(ir_data)
for(i in 1:length(ir_data)) {
ir_data[i] <- ir_data[i]
}
ir_data <- numeric(ir_data)
for(i in 1:length(ir_data)) {
ir_data[i] <- ir_data[i]
}
hist(ir_data)
hist(ir_data)
as.numeric(unlist(ir_data))
ir_data <- as.numeric(unlist(ir_data))
hist(ir_data)
hist(rho_data)
ir_data <- as.numeric(unlist(ir_data))
hist(ir_data, breaks = 10)
hist(rho_data)
ir_data <- as.numeric(unlist(ir_data))
hist(ir_data, breaks = 8)
hist(rho_data)
ir_data <- as.numeric(unlist(ir_data))
hist(ir_data, breaks = 5)
hist(rho_data)
ir_data <- as.numeric(unlist(ir_data))
hist(ir_data, breaks = 5, xlim = range(ir_data))
hist(rho_data)
ir_data <- as.numeric(unlist(ir_data))
hist(ir_data, breaks = 5, xlim = (range(ir_data) + 10)
hist(rho_data)
ir_data <- as.numeric(unlist(ir_data))
hist(ir_data, breaks = 5, xlim = (range(ir_data) + 10))
hist(rho_data)
ir_data <- as.numeric(unlist(ir_data))
hist(ir_data, breaks = 5)
hist(rho_data)
ir_data <- as.numeric(unlist(ir_data))
ir_data <- as.numeric(unlist(ir_data))
hist(ir_data, breaks = 5)
hist(rho_data, breaks = 5)
ir_data <- as.numeric(unlist(ir_data))
ir_data <- as.numeric(unlist(ir_data))
hist(ir_data, breaks = 5)
hist(rho_data, breaks = 5)
ir_data <- as.numeric(unlist(ir_data))
rho_data <- as.numeric(unlist(rho_data))
hist(ir_data, breaks = 5)
hist(rho_data, breaks = 5)
#stem and leaf plots
stem(ir_data)
stem(rho_data)
#boxplots
boxplot(ir_data)
boxplot(rho_data)
remove(list = ls())
data <- read.csv("beeswax.csv")
#plot the ecdf of hydrocarbon data
plot(ecdf(data[ , 2]))
#histogram of hydrocarbon data
hist(data[ , 2], breaks = 15)
#normal probability plot of hydrocarbon data
qqnorm(data[ , 2])
qqline(data[ , 2])
#quantiles of hydrocarbon data
quantiles <- quantile(data[ , 2], probs = seq(0, 1, 0.05))
quantiles[c(3, 6, 11, 16, 19)]
#average percentage of hydrocarbons
avg_hydrocarbons <- mean(data[ , 2])
(0.99 * avg_hydrocarbons) + (0.01 * 0.85)
(0.97 * avg_hydrocarbons) + (0.03 * 0.85)
(0.95 * avg_hydrocarbons) + (0.05 * 0.85)
sd(data[ , 2])
#generating an exponential sample of size 100
set.seed(3)
exp_sample <- rexp(n = 100, rate = 1)
#empirical log survival function
sd_exp_sample <- sqrt((1/100) * ((1 - exp(-exp_sample)) / (exp(-exp_sample))))
plot(exp_sample, sd_exp_sample, xlim = c(0, 5), ylim = c(0, 0.6))
exp_samples <- matrix(nrow = 100, ncol = 10)
#sd_exp_samples <- matrix(nrow = 100, ncol = 10)
#generating samples of size 100 from an exponential distribution
for (i in 1:10) {
exp_samples[ , i] <- rexp(n = 100, rate = 1)
}
#for (i in 1:10) {
#  sd_exp_samples[ , i] <- sqrt((1/100) * ((1 - exp(-exp_samples[ , i])) / (exp(-exp_samples[ , i]))))
#}
#plotting empirical log survival functions
for (i in 1:10) {
plot(exp_samples[ , i], (1 - exp(-exp_samples[ , i])), xlim = c(0, 7))
}
ir_data <- read.csv("iridium.csv", header = FALSE)
rho_data <- read.csv("rhodium.csv", header = FALSE)
#histograms
ir_data <- as.numeric(unlist(ir_data))
rho_data <- as.numeric(unlist(rho_data))
hist(ir_data, breaks = 5)
hist(rho_data, breaks = 5)
#stem and leaf plots
stem(ir_data)
stem(rho_data)
#boxplots
boxplot(ir_data)
boxplot(rho_data)
plot(ir_data)
plot(ir_data, rho_data)
plot(ir_data, rho_data)
plot(ir_data, rho_data)
#plots of data in the order of the experiment
plot(ir_data)
plot(rho_data)
x=seq(0,6,by=0.01)
y1 <- ecdf(rexp(100, rate=1))
lines(x,log(1-y1(x)),add=T)
x=seq(0,6,by=0.01)
y1 <- ecdf(rexp(100, rate=1))
plot.new()
lines(x,log(1-y1(x)),add=T)
x=seq(0,6,by=0.01)
y1 <- ecdf(rexp(100, rate=1))
lines(x,log(1-y1(x)),add=T)
y1 <- ecdf(rexp(100, rate=1))
x=seq(0,6,by=0.01)
y1 <- ecdf(rexp(100, rate=1))
plot(x,log(1-y1(x)),add=T)
x=seq(0,6,by=0.01)
y1 <- ecdf(rexp(100, rate=1))
plot(x,log(1-y1(-x)),add=T)
qqnorm(data[ , 2])
qqline(data[ , 2])
data <- read.csv("beeswax.csv")
#plot the ecdf of hydrocarbon data
plot(ecdf(data[ , 2]))
#histogram of hydrocarbon data
hist(data[ , 2], breaks = 15)
#normal probability plot of hydrocarbon data
qqnorm(data[ , 2])
qqline(data[ , 2])
#quantiles of hydrocarbon data
quantiles <- quantile(data[ , 2], probs = seq(0, 1, 0.05))
quantiles[c(3, 6, 11, 16, 19)]
plot(ecdf(data[ , 2]))
max(data[ , 2])
data <- read.csv("beeswax.csv")
#plot the ecdf of hydrocarbon data
plot(ecdf(data[ , 2]))
#histogram of hydrocarbon data
hist(data[ , 2], breaks = 15)
#normal probability plot of hydrocarbon data
qqnorm(data[ , 2])
qqline(data[ , 2])
#quantiles of hydrocarbon data
quantiles <- quantile(data[ , 2], probs = seq(0, 1, 0.05))
quantiles[c(3, 6, 11, 16, 19)]
#average percentage of hydrocarbons
avg_hydrocarbons <- mean(data[ , 2])
(0.99 * avg_hydrocarbons) + (0.01 * 0.85)
(0.97 * avg_hydrocarbons) + (0.03 * 0.85)
(0.95 * avg_hydrocarbons) + (0.05 * 0.85)
sd(data[ , 2])
#generating an exponential sample of size 100
set.seed(3)
exp_sample <- rexp(n = 100, rate = 1)
#empirical log survival function
sd_exp_sample <- sqrt((1/100) * ((1 - exp(-exp_sample)) / (exp(-exp_sample))))
plot(exp_sample, sd_exp_sample, xlim = c(0, 5), ylim = c(0, 0.6))
exp_samples <- matrix(nrow = 100, ncol = 10)
#sd_exp_samples <- matrix(nrow = 100, ncol = 10)
#generating samples of size 100 from an exponential distribution
for (i in 1:10) {
exp_samples[ , i] <- rexp(n = 100, rate = 1)
}
#for (i in 1:10) {
#  sd_exp_samples[ , i] <- sqrt((1/100) * ((1 - exp(-exp_samples[ , i])) / (exp(-exp_samples[ , i]))))
#}
#plotting empirical log survival functions
for (i in 1:10) {
plot(exp_samples[ , i], (1 - exp(-exp_samples[ , i])), xlim = c(0, 7))
}
ir_data <- read.csv("iridium.csv", header = FALSE)
rho_data <- read.csv("rhodium.csv", header = FALSE)
#histograms
ir_data <- as.numeric(unlist(ir_data))
rho_data <- as.numeric(unlist(rho_data))
hist(ir_data, breaks = 5)
hist(rho_data, breaks = 5)
#stem and leaf plots
stem(ir_data)
stem(rho_data)
#boxplots
boxplot(ir_data)
boxplot(rho_data)
#plots of data in the order of the experiment
plot(ir_data)
plot(rho_data)
x=seq(0,6,by=0.01)
y1 <- ecdf(rexp(100, rate=1))
plot(x,log(1-y1(x)),add=T)
mean(ir_data)
median(ir_data)
trim(ir_data, triim = 0.01)
mean(ir_data, triim = 0.01)
mean(ir_data, triim = 0.02)
mean(ir_data)
median(ir_data)
mean(ir_data, triim = 0.02)
mean(ir_data, trim = 0.02)
mean(ir_data)
median(ir_data)
mean(ir_data, trim = 0.02)
mean(ir_data)
median(ir_data)
mean(ir_data, trim = 0.02)
mean(ir_data, trim = 0.5)
mean(ir_data, trim = 0.1)
mean(ir_data, trim = 0.2)
hello
mean(rho_data)
#median
median(rho_data)
#10% trimmed mean
mean(rho_data, trim = 0.1)
#20% trimmed mean
mean(rho_data, trim = 0.2)
#mean
mean(ir_data)
#median
median(ir_data)
#10% trimmed mean
mean(ir_data, trim = 0.1)
#20% trimmed mean
mean(ir_data, trim = 0.2)
mean(ir_data, trim = 0.3)
sd(ir_data)
sd(rho_data)
sd(ir_data)
sd(rho_data)
sd(ir_data) / sqrt(27)
sd(rho_data) / sqrt(40)
se_iridium <- sd(ir_data) / sqrt(27)
#standard error rhodium
se_rhodium <- sd(rho_data) / sqrt(40)
sd(rho_data)
#standard error iridium
se_iridium <- sd(ir_data) / sqrt(27)
#standard error rhodium
se_rhodium <- sd(rho_data) / sqrt(40)
#upper bound of CI for iridium
mean(ir_data) + (1.645 * se_iridium)
#lower bound of CI for iridium
mean(ir_data) - (1.645 * se_iridium)
#upper bound of CI for rhodium
mean(rho_data) + (1.645 * se_rhodium)
#lower bound of CI for rhodium
mean(rho_data) - (1.645 * se_rhodium)
ir_data
sort(ir_data)
sort(ir_data)
#constructing the bootstrap population
vals = sort(unique(ir_data))
counts = table(ir_data)
# makes the bootstrap pop as rounded version of sample, not quite right
boot_pop <- rep(vals, round(counts * population_size / length(my_sample)))
counts = table(ir_data)
counts
#constructing the bootstrap population
vals = sort(unique(ir_data))
counts = table(ir_data)
# makes the bootstrap pop as rounded version of sample, not quite right
boot_pop <- rep(vals, 1000)
length(boot_pop)
#constructing the bootstrap population
vals = sort(unique(ir_data))
counts = table(ir_data)
# makes the bootstrap pop as rounded version of sample, not quite right
boot_pop <- rep(vals, 100)
length(boot_pop)
boot_pop_sample <- replicate(1000, sample(boot_pop, length(ir_data), FALSE))
boot_pop_sample
str(boot_pop_sample)
#constructing the bootstrap population
vals = sort(unique(ir_data))
counts = table(ir_data)
# makes the bootstrap pop as rounded version of sample, not quite right
boot_pop <- rep(vals, 100)
length(boot_pop)
#sampling from the bootstrap population
boot_pop_sample <- replicate(1000, sample(boot_pop, length(ir_data), FALSE))
# boot_pop_sample is now a matrix of 27 rows (the number of temps per sample),
# and 1000 columns (the total number of samples).
#calculating the sample averages of the bootstrap samples
boot_x_bars_10 <- 0
for (i in 1:1000) {
boot_x_bars_10[i] <- mean(boot_pop_sample[ , i], trim = 0.1)
}
boot_x_bars_20 <- 0
for (i in 1:1000) {
boot_x_bars_20[i] <- mean(boot_pop_sample[ , i], trim = 0.2)
}
boot_x_bars_20
#histogram of sample averages with vertical line at bootstrap pop. average
hist(boot_x_bars_10, main = "Histogram of Bootstrap 10% Trimmed Sample Averages",
xlab = "10% Trimmed Bootstrap Sample Averages")
boot_pop_mean <- mean(boot_pop)
abline(v=boot_pop_mean,col="red", lwd = 2)
#histogram of 20% trimmed sample averages with vertical line at bootstrap pop. average
hist(boot_x_bars_20, main = "Histogram of Bootstrap 20% Trimmed Sample Averages",
xlab = "20% Trimmed Bootstrap Sample Averages")
boot_pop_mean <- mean(boot_pop)
abline(v=boot_pop_mean,col="red", lwd = 2)
hist(boot_pop_mean)
hist(boot_pop)
boot_se <- 0
for (i in 1:1000) {
boot_se[i] <- (sd(boot_pop_sample[ , i]) / sqrt(27))
}
hist(boot_se)
