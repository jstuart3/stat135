sep = "")
#calculating the sample averages of the bootstrap samples
boot_x_bars <- 0
for (i in 1:1000) {
boot_x_bars[i] <- mean(boot_pop_sample[ , i])
}
#histogram of sample averages with vertical line at bootstrap pop. average
hist(boot_x_bars)
boot_pop_mean <- mean(boot_pop)
abline(v=boot_pop_mean,col="red", lwd = 2)
#calculating the sd of the sample averages
standard_deviation_averages <- sd(boot_x_bars)
cat("The SD of our sample averages is ", standard_deviation_averages,
", while the estimated standard error from \nQuestion 1a is ",
standard_error, ", a difference of ",
abs(standard_deviation_averages - standard_error), ".", sep = "")
#getting the quantlies of the bootstrap sample averages
bootstrap_quantile <- quantile(boot_x_bars, probs = seq(0, 1, .025))
#taking a look at the `bootstrap_quantile` vector
head(bootstrap_quantile)
#constructing the bootstrap confidence intervals
cat("The 95% confidence interval for the bootstrap population is [",
unname(bootstrap_quantile[2]), ", ", unname(bootstrap_quantile[40]), "]")
cat("The 95% confidence interval associated with our bootstrap population is \n[",
unname(bootstrap_quantile[2]), ", ", unname(bootstrap_quantile[40]), "]",
", while the 95% confidence interval associated with our estimated \nstandard error in Question 1a was [",
lower_limit, ",", upper_limit, "]", ". The two intervals are nearly \nequivalent.", sep = "")
population_size <- 1236
sample_size <- 100
#taking a simple random sample
set.seed(7)
my_sample = sample(na.omit(infants$wt),100)
#finding sample average
x_bar <- mean(my_sample)
#calculating s
s <- sqrt((sum((my_sample - x_bar) ^ 2)) / (sample_size - 1))
#calculating standard error
standard_error <- (s / sqrt(100)) *
sqrt((population_size - sample_size) / (population_size - 1))
cat("Our estimated standard error is ", standard_error, ".", sep = "")
#constucting a confidence interval
lower_limit <- x_bar - 1.96 * standard_error
upper_limit <- x_bar + 1.96 * standard_error
cat("Our 95% confidence interval for average weight of mothers is [",
lower_limit, ",", upper_limit, "]")
#creating relevant variables
my_samples <- matrix(nrow = 1000, ncol = 100)
x_bars <- 0
standard_error_values <- 0
confidence_intervals <- matrix(nrow = 1000, ncol = 2)
confidence_intverval_accuracy <- matrix(nrow = 1000, ncol = 1)
ci_accuracy <- matrix(nrow = 1000, ncol = 1)
true_average <- mean(na.omit(infants$wt))
#for loop to generate confidence intervals
for (i in 1:1000) {
my_samples[i, ] = sample(na.omit(infants$wt),100)
x_bars[i] <- mean(my_samples[i, ])
standard_error_values[i] <- sd(my_samples[i, 1:100]) / sqrt(100)
confidence_intervals[i, 1] <- x_bars[i] - 1.96 * standard_error_values[i]
confidence_intervals[i, 2] <- x_bars[i] + 1.96 * standard_error_values[i]
ci_accuracy[i] <- (true_average <= confidence_intervals[i, 2] &
true_average >= confidence_intervals[i, 1])
}
ci_table <- table(ci_accuracy)
cat("Of our 1000 sample averages, ", unname(ci_table[1]),
" values fell outside of their corresponding \nconfidence intervals, while ",
unname(ci_table[2]),
" values fell within their corresponding \nconfidence intervals.", sep = "")
#calculating the SD of the sample means
sd_means <- sd(x_bars)
sd_means
cat("The SD of our sample average is ", sd_means,
", while the estimated standard error from \nQuestion 1a is ",
standard_error, ", a difference of ", abs(sd_means - standard_error), ".",
sep = "")
#histogram of sample averages
hist(x_bars, main = "Histogram of Sample Averages", xlab = "Sample Averages")
#qqplot of x_bars
qqnorm(x_bars, main = "qq Plot for Sample Averages")
cat("It appears that very nearly 95% of the mass of sample averages is contained \nwithin the interval [",
lower_limit, ", ", upper_limit, "]. This means that the \nconfidence interval is extremely valid.", sep = "")
#constructing the bootstrap population
vals = sort(unique(my_sample))
counts = table(my_sample)
# makes the bootstrap pop as rounded version of sample, not quite right
boot_pop <- rep(vals, round(counts * population_size / length(my_sample)))
length(boot_pop)
cat("boot_pop is now a vector of ", length(boot_pop),
", the number of members in the bootstrap population.", sep = "")
#sampling from the bootstrap population
boot_pop_sample <- replicate(1000, sample(boot_pop, length(my_sample), FALSE))
cat("boot_pop_sample is now a matrix of ", length(boot_pop_sample[ , 1]),
" rows (the number of members per sample), \nand ",
length(boot_pop_sample[1, ]), " columns (the total number of samples).",
sep = "")
#calculating the sample averages of the bootstrap samples
boot_x_bars <- 0
for (i in 1:1000) {
boot_x_bars[i] <- mean(boot_pop_sample[ , i])
}
#histogram of sample averages with vertical line at bootstrap pop. average
hist(boot_x_bars, main = "Histogram of Bootstrap Sample Averages",
xlab = "Bootstrap Sample Averages")
boot_pop_mean <- mean(boot_pop)
abline(v=boot_pop_mean,col="red", lwd = 2)
#calculating the sd of the sample averages
standard_deviation_averages <- sd(boot_x_bars)
cat("The SD of our sample averages is ", standard_deviation_averages,
", while the estimated standard error from \nQuestion 1a is ",
standard_error, ", a difference of ",
abs(standard_deviation_averages - standard_error), ".", sep = "")
#getting the quantlies of the bootstrap sample averages
bootstrap_quantile <- quantile(boot_x_bars, probs = seq(0, 1, .025))
#taking a look at the `bootstrap_quantile` vector
head(bootstrap_quantile)
#constructing the bootstrap confidence intervals
cat("The 95% confidence interval for the bootstrap population is [",
unname(bootstrap_quantile[2]), ", ", unname(bootstrap_quantile[40]), "]")
cat("The 95% confidence interval associated with our bootstrap population is \n[",
unname(bootstrap_quantile[2]), ", ", unname(bootstrap_quantile[40]), "]",
", while the 95% confidence interval associated with our estimated \nstandard error in Question 1a was [",
lower_limit, ",", upper_limit, "]", ". The two intervals are nearly \nequivalent.", sep = "")
load("data/KaiserBabies.rda")
population_size <- 1236
sample_size <- 10
#taking a simple random sample
set.seed(7)
my_sample = sample(na.omit(infants$wt),10)
#finding sample average
x_bar <- mean(my_sample)
#calculating s
s <- sqrt((sum((my_sample - x_bar) ^ 2)) / (sample_size - 1))
#calculating standard error
standard_error <- (s / sqrt(10)) *
sqrt((population_size - sample_size) / (population_size - 1))
cat("Our estimated standard error is ", standard_error, ".", sep = "")
#constucting a confidence interval
lower_limit <- x_bar - 1.96 * standard_error
upper_limit <- x_bar + 1.96 * standard_error
cat("Our 95% confidence interval for average weight of mothers is [",
lower_limit, ",", upper_limit, "]")
#creating relevant variables
my_samples <- matrix(nrow = 1000, ncol = 10)
x_bars <- 0
standard_error_values <- 0
confidence_intervals <- matrix(nrow = 1000, ncol = 2)
confidence_intverval_accuracy <- matrix(nrow = 1000, ncol = 1)
ci_accuracy <- matrix(nrow = 1000, ncol = 1)
true_average <- mean(na.omit(infants$wt))
#for loop to generate confidence intervals
for (i in 1:1000) {
my_samples[i, ] = sample(na.omit(infants$wt),10)
x_bars[i] <- mean(my_samples[i, ])
standard_error_values[i] <- sd(my_samples[i, 1:10]) / sqrt(10)
confidence_intervals[i, 1] <- x_bars[i] - 1.96 * standard_error_values[i]
confidence_intervals[i, 2] <- x_bars[i] + 1.96 * standard_error_values[i]
ci_accuracy[i] <- (true_average <= confidence_intervals[i, 2] &
true_average >= confidence_intervals[i, 1])
}
ci_table <- table(ci_accuracy)
cat("Of our 1000 sample averages, ", unname(ci_table[1]),
" values fell outside of their corresponding \nconfidence intervals, while ",
unname(ci_table[2]),
" values fell within their corresponding \nconfidence intervals.", sep = "")
#calculating the SD of the sample means
sd_means <- sd(x_bars)
sd_means
cat("The SD of our sample average is ", sd_means,
", while the estimated standard error from \nQuestion 1a is ",
standard_error, ", a difference of ", abs(sd_means - standard_error), ".",
sep = "")
#histogram of sample averages
hist(x_bars, main = "Histogram of Sample Averages", xlab = "Sample Averages")
#qqplot of x_bars
qqnorm(x_bars, main = "qq Plot for Sample Averages")
cat("It appears that slightly less that 95% of the mass of sample averages is contained \nwithin the interval [",
lower_limit, ", ", upper_limit, "], perhaps 85-90%. This means that the \nconfidence interval is slightly invalid.", sep = "")
#constructing the bootstrap population
vals = sort(unique(my_sample))
counts = table(my_sample)
# makes the bootstrap pop as rounded version of sample, not quite right
boot_pop <- rep(vals, round(counts * population_size / length(my_sample)))
length(boot_pop)
cat("boot_pop is now a vector of ", length(boot_pop),
", the number of members in the bootstrap population.", sep = "")
#sampling from the bootstrap population
boot_pop_sample <- replicate(1000, sample(boot_pop, length(my_sample), FALSE))
cat("boot_pop_sample is now a matrix of ", length(boot_pop_sample[ , 1]),
" rows (the number of members per sample), \nand ",
length(boot_pop_sample[1, ]), " columns (the total number of samples).",
sep = "")
#calculating the sample averages of the bootstrap samples
boot_x_bars <- 0
for (i in 1:1000) {
boot_x_bars[i] <- mean(boot_pop_sample[ , i])
}
#histogram of sample averages with vertical line at bootstrap pop. average
hist(boot_x_bars)
boot_pop_mean <- mean(boot_pop)
abline(v=boot_pop_mean,col="red", lwd = 2)
#calculating the sd of the sample averages
standard_deviation_averages <- sd(boot_x_bars)
cat("The SD of our sample averages is ", standard_deviation_averages,
", while the estimated standard error from \nQuestion 1a is ",
standard_error, ", a difference of ",
abs(standard_deviation_averages - standard_error), ".", sep = "")
#getting the quantlies of the bootstrap sample averages
bootstrap_quantile <- quantile(boot_x_bars, probs = seq(0, 1, .025))
#taking a look at the `bootstrap_quantile` vector
head(bootstrap_quantile)
#constructing the bootstrap confidence intervals
cat("The 95% confidence interval for the bootstrap population is [",
unname(bootstrap_quantile[2]), ", ", unname(bootstrap_quantile[40]), "]")
cat("The 95% confidence interval associated with our bootstrap population is \n[",
unname(bootstrap_quantile[2]), ", ", unname(bootstrap_quantile[40]), "]",
", while the 95% confidence interval associated with our estimated \nstandard error in Question 1a was [",
lower_limit, ",", upper_limit, "]", ". The two intervals are nearly \nequivalent.", sep = "")
population_size <- 1236
sample_size <- 100
#taking a simple random sample
set.seed(7)
my_sample = sample(na.omit(infants$wt),100)
#finding sample average
x_bar <- mean(my_sample)
#calculating s
s <- sqrt((sum((my_sample - x_bar) ^ 2)) / (sample_size - 1))
#calculating standard error
standard_error <- (s / sqrt(100)) *
sqrt((population_size - sample_size) / (population_size - 1))
cat("Our estimated standard error is ", standard_error, ".", sep = "")
#constucting a confidence interval
lower_limit <- x_bar - 1.96 * standard_error
upper_limit <- x_bar + 1.96 * standard_error
cat("Our 95% confidence interval for average weight of mothers is [",
lower_limit, ",", upper_limit, "]")
#creating relevant variables
my_samples <- matrix(nrow = 1000, ncol = 100)
x_bars <- 0
standard_error_values <- 0
confidence_intervals <- matrix(nrow = 1000, ncol = 2)
confidence_intverval_accuracy <- matrix(nrow = 1000, ncol = 1)
ci_accuracy <- matrix(nrow = 1000, ncol = 1)
true_average <- mean(na.omit(infants$wt))
#for loop to generate confidence intervals
for (i in 1:1000) {
my_samples[i, ] = sample(na.omit(infants$wt),100)
x_bars[i] <- mean(my_samples[i, ])
standard_error_values[i] <- sd(my_samples[i, 1:100]) / sqrt(100)
confidence_intervals[i, 1] <- x_bars[i] - 1.96 * standard_error_values[i]
confidence_intervals[i, 2] <- x_bars[i] + 1.96 * standard_error_values[i]
ci_accuracy[i] <- (true_average <= confidence_intervals[i, 2] &
true_average >= confidence_intervals[i, 1])
}
ci_table <- table(ci_accuracy)
cat("Of our 1000 sample averages, ", unname(ci_table[1]),
" values fell outside of their corresponding \nconfidence intervals, while ",
unname(ci_table[2]),
" values fell within their corresponding \nconfidence intervals.", sep = "")
#calculating the SD of the sample means
sd_means <- sd(x_bars)
sd_means
cat("The SD of our sample average is ", sd_means,
", while the estimated standard error from \nQuestion 1a is ",
standard_error, ", a difference of ", abs(sd_means - standard_error), ".",
sep = "")
#histogram of sample averages
hist(x_bars, main = "Histogram of Sample Averages", xlab = "Sample Averages")
#qqplot of x_bars
qqnorm(x_bars, main = "qq Plot for Sample Averages")
cat("It appears that very nearly 95% of the mass of sample averages is contained \nwithin the interval [",
lower_limit, ", ", upper_limit, "]. This means that the \nconfidence interval is extremely valid.", sep = "")
#constructing the bootstrap population
vals = sort(unique(my_sample))
counts = table(my_sample)
# makes the bootstrap pop as rounded version of sample, not quite right
boot_pop <- rep(vals, round(counts * population_size / length(my_sample)))
length(boot_pop)
cat("boot_pop is now a vector of ", length(boot_pop),
", the number of members in the bootstrap population.", sep = "")
#sampling from the bootstrap population
boot_pop_sample <- replicate(1000, sample(boot_pop, length(my_sample), FALSE))
cat("boot_pop_sample is now a matrix of ", length(boot_pop_sample[ , 1]),
" rows (the number of members per sample), \nand ",
length(boot_pop_sample[1, ]), " columns (the total number of samples).",
sep = "")
#calculating the sample averages of the bootstrap samples
boot_x_bars <- 0
for (i in 1:1000) {
boot_x_bars[i] <- mean(boot_pop_sample[ , i])
}
#histogram of sample averages with vertical line at bootstrap pop. average
hist(boot_x_bars, main = "Histogram of Bootstrap Sample Averages",
xlab = "Bootstrap Sample Averages")
boot_pop_mean <- mean(boot_pop)
abline(v=boot_pop_mean,col="red", lwd = 2)
remove(list=ls())
cat("The 95% confidence interval associated with our bootstrap population is \n[",
unname(bootstrap_quantile[2]), ", ", unname(bootstrap_quantile[40]), "]",
", while the 95% confidence interval associated with our estimated \nstandard error in Question 1a was [",
lower_limit, ", ", upper_limit, "]", ". The two intervals are nearly \nequivalent.", sep = "")
load("data/KaiserBabies.rda")
population_size <- 1236
sample_size <- 10
#taking a simple random sample
set.seed(7)
my_sample = sample(na.omit(infants$wt),10)
#finding sample average
x_bar <- mean(my_sample)
#calculating s
s <- sqrt((sum((my_sample - x_bar) ^ 2)) / (sample_size - 1))
#calculating standard error
standard_error <- (s / sqrt(10)) *
sqrt((population_size - sample_size) / (population_size - 1))
cat("Our estimated standard error is ", standard_error, ".", sep = "")
#constucting a confidence interval
lower_limit <- x_bar - 1.96 * standard_error
upper_limit <- x_bar + 1.96 * standard_error
cat("Our 95% confidence interval for average weight of mothers is [",
lower_limit, ",", upper_limit, "]")
#creating relevant variables
my_samples <- matrix(nrow = 1000, ncol = 10)
x_bars <- 0
standard_error_values <- 0
confidence_intervals <- matrix(nrow = 1000, ncol = 2)
confidence_intverval_accuracy <- matrix(nrow = 1000, ncol = 1)
ci_accuracy <- matrix(nrow = 1000, ncol = 1)
true_average <- mean(na.omit(infants$wt))
#for loop to generate confidence intervals
for (i in 1:1000) {
my_samples[i, ] = sample(na.omit(infants$wt),10)
x_bars[i] <- mean(my_samples[i, ])
standard_error_values[i] <- sd(my_samples[i, 1:10]) / sqrt(10)
confidence_intervals[i, 1] <- x_bars[i] - 1.96 * standard_error_values[i]
confidence_intervals[i, 2] <- x_bars[i] + 1.96 * standard_error_values[i]
ci_accuracy[i] <- (true_average <= confidence_intervals[i, 2] &
true_average >= confidence_intervals[i, 1])
}
ci_table <- table(ci_accuracy)
cat("Of our 1000 sample averages, ", unname(ci_table[1]),
" values fell outside of their corresponding \nconfidence intervals, while ",
unname(ci_table[2]),
" values fell within their corresponding \nconfidence intervals.", sep = "")
#calculating the SD of the sample means
sd_means <- sd(x_bars)
sd_means
cat("The SD of our sample average is ", sd_means,
", while the estimated standard error from \nQuestion 1a is ",
standard_error, ", a difference of ", abs(sd_means - standard_error), ".",
sep = "")
#histogram of sample averages
hist(x_bars, main = "Histogram of Sample Averages", xlab = "Sample Averages")
#qqplot of x_bars
qqnorm(x_bars, main = "qq Plot for Sample Averages")
cat("It appears that slightly less that 95% of the mass of sample averages is contained \nwithin the interval [",
lower_limit, ", ", upper_limit, "], perhaps 85-90%. This means that the \nconfidence interval is slightly invalid.", sep = "")
#constructing the bootstrap population
vals = sort(unique(my_sample))
counts = table(my_sample)
# makes the bootstrap pop as rounded version of sample, not quite right
boot_pop <- rep(vals, round(counts * population_size / length(my_sample)))
length(boot_pop)
cat("boot_pop is now a vector of ", length(boot_pop),
", the number of members in the bootstrap population.", sep = "")
#sampling from the bootstrap population
boot_pop_sample <- replicate(1000, sample(boot_pop, length(my_sample), FALSE))
cat("boot_pop_sample is now a matrix of ", length(boot_pop_sample[ , 1]),
" rows (the number of members per sample), \nand ",
length(boot_pop_sample[1, ]), " columns (the total number of samples).",
sep = "")
#calculating the sample averages of the bootstrap samples
boot_x_bars <- 0
for (i in 1:1000) {
boot_x_bars[i] <- mean(boot_pop_sample[ , i])
}
#histogram of sample averages with vertical line at bootstrap pop. average
hist(boot_x_bars, main = "Histogram of Bootstrap Sample Averages",
xlab = "Bootstrap Sample Averages")
boot_pop_mean <- mean(boot_pop)
abline(v=boot_pop_mean,col="red", lwd = 2)
#calculating the sd of the sample averages
standard_deviation_averages <- sd(boot_x_bars)
cat("The SD of our sample averages is ", standard_deviation_averages,
", while the estimated standard error from \nQuestion 1a is ",
standard_error, ", a difference of ",
abs(standard_deviation_averages - standard_error), ".", sep = "")
#getting the quantlies of the bootstrap sample averages
bootstrap_quantile <- quantile(boot_x_bars, probs = seq(0, 1, .025))
#taking a look at the `bootstrap_quantile` vector
head(bootstrap_quantile)
#constructing the bootstrap confidence intervals
cat("The 95% confidence interval for the bootstrap population is [",
unname(bootstrap_quantile[2]), ", ", unname(bootstrap_quantile[40]), "]")
cat("The 95% confidence interval associated with our bootstrap population is \n[",
unname(bootstrap_quantile[2]), ", ", unname(bootstrap_quantile[40]), "]",
", while the 95% confidence interval associated with our estimated \nstandard error in Question 1a was [",
lower_limit, ", ", upper_limit, "]", ". The two intervals are nearly \nequivalent.", sep = "")
#creating relevant variables
my_samples <- matrix(nrow = 1000, ncol = 10)
x_bars <- 0
standard_error_values <- 0
confidence_intervals <- matrix(nrow = 1000, ncol = 2)
confidence_intverval_accuracy <- matrix(nrow = 1000, ncol = 1)
ci_accuracy <- matrix(nrow = 1000, ncol = 1)
true_average <- mean(na.omit(infants$wt))
#for loop to generate confidence intervals
for (i in 1:1000) {
my_samples[i, ] = sample(na.omit(infants$wt),10)
x_bars[i] <- mean(my_samples[i, ])
standard_error_values[i] <- sd(my_samples[i, 1:10]) / sqrt(10)
confidence_intervals[i, 1] <- x_bars[i] - 1.96 * standard_error_values[i]
confidence_intervals[i, 2] <- x_bars[i] + 1.96 * standard_error_values[i]
ci_accuracy[i] <- (true_average <= confidence_intervals[i, 2] &
true_average >= confidence_intervals[i, 1])
}
ci_table <- table(ci_accuracy)
cat("Of our 1000 sample averages, ", unname(ci_table[1]),
" values fell outside of their corresponding \nconfidence intervals, while ",
unname(ci_table[2]),
" values fell within their corresponding \nconfidence intervals.", sep = "")
#creating relevant variables
my_samples <- matrix(nrow = 1000, ncol = 100)
x_bars <- 0
standard_error_values <- 0
confidence_intervals <- matrix(nrow = 1000, ncol = 2)
confidence_intverval_accuracy <- matrix(nrow = 1000, ncol = 1)
ci_accuracy <- matrix(nrow = 1000, ncol = 1)
true_average <- mean(na.omit(infants$wt))
#for loop to generate confidence intervals
for (i in 1:1000) {
my_samples[i, ] = sample(na.omit(infants$wt),100)
x_bars[i] <- mean(my_samples[i, ])
standard_error_values[i] <- sd(my_samples[i, 1:100]) / sqrt(100)
confidence_intervals[i, 1] <- x_bars[i] - 1.96 * standard_error_values[i]
confidence_intervals[i, 2] <- x_bars[i] + 1.96 * standard_error_values[i]
ci_accuracy[i] <- (true_average <= confidence_intervals[i, 2] &
true_average >= confidence_intervals[i, 1])
}
ci_table <- table(ci_accuracy)
cat("Of our 1000 sample averages, ", unname(ci_table[1]),
" values fell outside of their corresponding \nconfidence intervals, while ",
unname(ci_table[2]),
" values fell within their corresponding \nconfidence intervals.", sep = "")
#creating relevant variables
my_samples <- matrix(nrow = 1000, ncol = 100)
x_bars <- 0
standard_error_values <- 0
confidence_intervals <- matrix(nrow = 1000, ncol = 2)
confidence_intverval_accuracy <- matrix(nrow = 1000, ncol = 1)
ci_accuracy <- matrix(nrow = 1000, ncol = 1)
true_average <- mean(na.omit(infants$wt))
#for loop to generate confidence intervals
for (i in 1:1000) {
my_samples[i, ] = sample(na.omit(infants$wt),100)
x_bars[i] <- mean(my_samples[i, ])
standard_error_values[i] <- sd(my_samples[i, 1:100]) / sqrt(100)
confidence_intervals[i, 1] <- x_bars[i] - 1.96 * standard_error_values[i]
confidence_intervals[i, 2] <- x_bars[i] + 1.96 * standard_error_values[i]
ci_accuracy[i] <- (true_average <= confidence_intervals[i, 2] &
true_average >= confidence_intervals[i, 1])
}
ci_table <- table(ci_accuracy)
cat("Of our 1000 sample averages, ", unname(ci_table[1]),
" values fell outside of their corresponding \nconfidence intervals, while ",
unname(ci_table[2]),
" values fell within their corresponding \nconfidence intervals.", sep = "")
#creating relevant variables
my_samples <- matrix(nrow = 1000, ncol = 100)
x_bars <- 0
standard_error_values <- 0
confidence_intervals <- matrix(nrow = 1000, ncol = 2)
confidence_intverval_accuracy <- matrix(nrow = 1000, ncol = 1)
ci_accuracy <- matrix(nrow = 1000, ncol = 1)
true_average <- mean(na.omit(infants$wt))
#for loop to generate confidence intervals
for (i in 1:1000) {
my_samples[i, ] = sample(na.omit(infants$wt),100)
x_bars[i] <- mean(my_samples[i, ])
standard_error_values[i] <- sd(my_samples[i, 1:100]) / sqrt(100)
confidence_intervals[i, 1] <- x_bars[i] - 1.96 * standard_error_values[i]
confidence_intervals[i, 2] <- x_bars[i] + 1.96 * standard_error_values[i]
ci_accuracy[i] <- (true_average <= confidence_intervals[i, 2] &
true_average >= confidence_intervals[i, 1])
}
ci_table <- table(ci_accuracy)
cat("Of our 1000 sample averages, ", unname(ci_table[1]),
" values fell outside of their corresponding \nconfidence intervals, while ",
unname(ci_table[2]),
" values fell within their corresponding \nconfidence intervals.", sep = "")
#creating relevant variables
my_samples <- matrix(nrow = 1000, ncol = 100)
x_bars <- 0
standard_error_values <- 0
confidence_intervals <- matrix(nrow = 1000, ncol = 2)
confidence_intverval_accuracy <- matrix(nrow = 1000, ncol = 1)
ci_accuracy <- matrix(nrow = 1000, ncol = 1)
true_average <- mean(na.omit(infants$wt))
#for loop to generate confidence intervals
for (i in 1:1000) {
my_samples[i, ] = sample(na.omit(infants$wt),100)
x_bars[i] <- mean(my_samples[i, ])
standard_error_values[i] <- sd(my_samples[i, 1:100]) / sqrt(100)
confidence_intervals[i, 1] <- x_bars[i] - 1.96 * standard_error_values[i]
confidence_intervals[i, 2] <- x_bars[i] + 1.96 * standard_error_values[i]
ci_accuracy[i] <- (true_average <= confidence_intervals[i, 2] &
true_average >= confidence_intervals[i, 1])
}
ci_table <- table(ci_accuracy)
cat("Of our 1000 sample averages, ", unname(ci_table[1]),
" values fell outside of their corresponding \nconfidence intervals, while ",
unname(ci_table[2]),
" values fell within their corresponding \nconfidence intervals.", sep = "")
remove(list = ls())
